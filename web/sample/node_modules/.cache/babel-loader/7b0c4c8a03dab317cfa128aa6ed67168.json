{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nvar ScatterBridge =\n/*#__PURE__*/\nfunction () {\n  function ScatterBridge(network, appName) {\n    _classCallCheck(this, ScatterBridge);\n\n    this.appName = appName;\n    ScatterJS.plugins(new ScatterEOS());\n    this.scatter = ScatterJS.scatter;\n    this.network = network;\n    console.log(\"\".concat(network.protocol, \"://\").concat(network.host, \":\").concat(network.port));\n    var rpc = new JsonRpc(\"\".concat(network.protocol, \"://\").concat(network.host, \":\").concat(network.port));\n    console.log(rpc);\n    this.currentAccount = null;\n    this.reqFields = {\n      accounts: [network]\n    };\n    this.eosApi = this.scatter.eos(network, Api, {\n      rpc: rpc\n    });\n    this.isConnected = false;\n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n  }\n\n  _createClass(ScatterBridge, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.scatter.connect(this.appName);\n\n              case 2:\n                this.isConnected = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"getIdentity\",\n    value: function () {\n      var _getIdentity = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isConnected) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.scatter.getIdentity(this.reqFields);\n\n              case 3:\n                this.currentAccount = this.scatter.identity.accounts.find(function (x) {\n                  return x.blockchain === \"eos\";\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getIdentity() {\n        return _getIdentity.apply(this, arguments);\n      }\n\n      return getIdentity;\n    }()\n  }, {\n    key: \"sendTx\",\n    value: function () {\n      var _sendTx = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(actions) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!actions.length) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                console.log(\"hey\");\n                _context3.next = 4;\n                return this.eosApi.transact({\n                  actions: actions\n                }, {\n                  blocksBehind: 3,\n                  expireSeconds: 30\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sendTx(_x) {\n        return _sendTx.apply(this, arguments);\n      }\n\n      return sendTx;\n    }()\n  }, {\n    key: \"makeAction\",\n    value: function makeAction(contract, actionName, data) {\n      var perm = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.currentAccount.authority;\n      return {\n        account: contract,\n        name: actionName,\n        authorization: [{\n          actor: this.currentAccount.name,\n          permission: perm // this.currentAccount.authority \n\n        }],\n        data: data\n      };\n    }\n  }]);\n\n  return ScatterBridge;\n}();\n\nexport { ScatterBridge as default };","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/scatterBrigde.js"],"names":["ScatterJS","ScatterEOS","Api","JsonRpc","ScatterBridge","network","appName","plugins","scatter","console","log","protocol","host","port","rpc","currentAccount","reqFields","accounts","eosApi","eos","isConnected","window","connect","getIdentity","identity","find","x","blockchain","actions","length","transact","blocksBehind","expireSeconds","contract","actionName","data","perm","authority","account","name","authorization","actor","permission"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,OAA7B;;IAEqBC,a;;;AACnB,yBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAC5B,SAAKA,OAAL,GAAeA,OAAf;AACAN,IAAAA,SAAS,CAACO,OAAV,CAAkB,IAAIN,UAAJ,EAAlB;AACA,SAAKO,OAAL,GAAeR,SAAS,CAACQ,OAAzB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACAI,IAAAA,OAAO,CAACC,GAAR,WAAeL,OAAO,CAACM,QAAvB,gBAAqCN,OAAO,CAACO,IAA7C,cAAqDP,OAAO,CAACQ,IAA7D;AAEA,QAAMC,GAAG,GAAG,IAAIX,OAAJ,WAAeE,OAAO,CAACM,QAAvB,gBAAqCN,OAAO,CAACO,IAA7C,cAAqDP,OAAO,CAACQ,IAA7D,EAAZ;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AAEA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,SAAL,GAAiB;AAAEC,MAAAA,QAAQ,EAAE,CAACZ,OAAD;AAAZ,KAAjB;AACA,SAAKa,MAAL,GAAc,KAAKV,OAAL,CAAaW,GAAb,CAAiBd,OAAjB,EAA0BH,GAA1B,EAA+B;AAACY,MAAAA,GAAG,EAAHA;AAAD,KAA/B,CAAd;AACA,SAAKM,WAAL,GAAmB,KAAnB;AAEAC,IAAAA,MAAM,CAACrB,SAAP,GAAmB,IAAnB;AACAqB,IAAAA,MAAM,CAACpB,UAAP,GAAoB,IAApB;AACD;;;;;;;;;;;;;uBAG0B,KAAKO,OAAL,CAAac,OAAb,CAAqB,KAAKhB,OAA1B,C;;;AAAzB,qBAAKc,W;;;;;;;;;;;;;;;;;;;;;;;;;;qBAIF,KAAKA,W;;;;;;uBACE,KAAKZ,OAAL,CAAae,WAAb,CAAyB,KAAKP,SAA9B,C;;;AACN,qBAAKD,cAAL,GAAsB,KAAKP,OAAL,CAAagB,QAAb,CAAsBP,QAAtB,CAA+BQ,IAA/B,CAAoC,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACC,UAAF,KAAiB,KAArB;AAAA,iBAArC,CAAtB;;;;;;;;;;;;;;;;;;;;;iDAIOC,O;;;;;qBACRA,OAAO,CAACC,M;;;;;AACTpB,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;;uBAEM,KAAKQ,MAAL,CAAYY,QAAZ,CAAqB;AACzBF,kBAAAA,OAAO,EAAEA;AADgB,iBAArB,EAEH;AAACG,kBAAAA,YAAY,EAAE,CAAf;AAAkBC,kBAAAA,aAAa,EAAE;AAAjC,iBAFG,C;;;;;;;;;;;;;;;;;;+BAMCC,Q,EAAUC,U,EAAYC,I,EAA4C;AAAA,UAAtCC,IAAsC,uEAA/B,KAAKrB,cAAL,CAAoBsB,SAAW;AAC3E,aAAO;AACHC,QAAAA,OAAO,EAAEL,QADN;AAEHM,QAAAA,IAAI,EAAEL,UAFH;AAGHM,QAAAA,aAAa,EAAE,CAAC;AACZC,UAAAA,KAAK,EAAE,KAAK1B,cAAL,CAAoBwB,IADf;AAEZG,UAAAA,UAAU,EAAEN,IAFA,CAEI;;AAFJ,SAAD,CAHZ;AAOHD,QAAAA,IAAI,EAAEA;AAPH,OAAP;AASD;;;;;;SAnDkB/B,a","sourcesContent":["import ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nexport default class ScatterBridge {\n  constructor(network, appName) {\n    this.appName = appName;  \n    ScatterJS.plugins(new ScatterEOS());\n    this.scatter = ScatterJS.scatter;\n    this.network = network;\n    console.log(`${network.protocol}://${network.host}:${network.port}`);\n    \n    const rpc = new JsonRpc(`${network.protocol}://${network.host}:${network.port}`);\n    console.log(rpc);\n    \n    this.currentAccount = null;\n    this.reqFields = { accounts: [network] };\n    this.eosApi = this.scatter.eos(network, Api, {rpc});\n    this.isConnected = false;\n    \n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n  }\n\n  async connect() {\n    this.isConnected = await this.scatter.connect(this.appName);\n  }\n\n  async getIdentity() {    \n    if(this.isConnected) {\n        await this.scatter.getIdentity(this.reqFields);\n        this.currentAccount = this.scatter.identity.accounts.find(x => x.blockchain === \"eos\");\n    }\n  }\n\n  async sendTx(actions) {\n    if(actions.length) {\n      console.log(\"hey\");\n      \n      await this.eosApi.transact({\n        actions: actions\n      }, {blocksBehind: 3, expireSeconds: 30 });\n    }\n  }\n\n  makeAction(contract, actionName, data, perm = this.currentAccount.authority) {\n    return { \n        account: contract, \n        name: actionName, \n        authorization: [{ \n            actor: this.currentAccount.name, \n            permission: perm// this.currentAccount.authority \n        }], \n        data: data \n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}