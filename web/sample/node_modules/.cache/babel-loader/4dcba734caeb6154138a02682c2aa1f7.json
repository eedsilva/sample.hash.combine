{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc, JsSignatureProvider } from 'eosjs';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ScatterJS.plugins(new ScatterEOS());\n      var connectionOptions = {\n        initTimeout: 10000\n      };\n      var network = {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId: \"4cec7eac46c16a031768556a675aff2794f56868d290a868a5981b4f0c07d42c\"\n      };\n      ScatterJS.scatter.connect(\"My-App\").then(function (connected) {\n        // If the user does not have Scatter or it is Locked or Closed this will return false;\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter; // Now we need to get an identity from the user.\n        // We're also going to require an account that is connected to the network we're using.\n\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var account, eosOptions, rpc, eos, transactionOptions;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n                  // the user for their account name beforehand. They could still give you a different account.\n                  account = scatter.identity.accounts.find(function (x) {\n                    return x.blockchain === 'eos';\n                  }); // You can pass in any additional options you want into the eosjs reference.\n\n                  eosOptions = {\n                    expireInSeconds: 60\n                  }; // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n                  // const defaultPrivateKey = \"5KENusrZoy5bw9hT8s74Wv3MDdHyqsvsHzVzeRL5LtYXR6MZRcS\";\n                  // const signatureProvider = new JsSignatureProvider([defaultPrivateKey]);\n\n                  rpc = new JsonRpc('http://127.0.0.1:8888'); // const api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n                  // const api = new Api({ rpc, signatureProvider:scatter.eosHook(network) });\n\n                  eos = scatter.eos(network, Api, {\n                    rpc: rpc\n                  }); // console.log(eos);\n                  // const eos = Eos({httpEndpoint:'',  signatureProvider:ScatterJS.scatter.eosHook(network)});\n                  // ----------------------------\n                  // Now that we have an identity,\n                  // an EOSIO account, and a reference\n                  // to an eosjs object we can send a transaction.\n                  // ----------------------------\n                  // Never assume the account's permission/authority. Always take it from the returned account.\n                  // console.log(account);\n\n                  transactionOptions = {\n                    authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n                  }; // console.log(requiredFields);\n                  //  eos.transact({\n                  //      actions: [{\n                  //          account: \"ed1111111111\",\n                  //          name: \"hello\",\n                  //          authorization: [{\n                  //              actor: account.name,\n                  //              permission: account.authority\n                  //            }],\n                  //          data: {}\n                  //        }],\n                  //      blocksBehind: 10,\n                  //      expireSeconds: 30\n                  //    })\n                  //    .then(r => console.log(\"result: \", r))\n                  //    .catch(err => console.error(\"aaaaahh!!!\", err));\n                  // const contract = await eos.contract('ed11111111', {requiredFields});\n                  // const result = await contract.hi(...);\n                  // console.log(contract);\n\n                  eos.transfer(account.name, 'ed1111111111', '1.0000 TLOS', 'memo', transactionOptions).then(function (trx) {\n                    // That's it!\n                    console.log(\"Transaction ID: \".concat(trx.transaction_id));\n                  }).catch(function (error) {\n                    console.error(error);\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }))).catch(function (error) {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(\"ERROR:\", error);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); //:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterJS","ScatterEOS","Api","JsonRpc","JsSignatureProvider","App","props","plugins","connectionOptions","initTimeout","network","blockchain","protocol","host","port","chainId","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","rpc","eos","transactionOptions","authorization","name","authority","transfer","trx","console","log","transaction_id","catch","error"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc, JsSignatureProvider } from 'eosjs';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n  }\n\n  componentDidMount() {\n    ScatterJS.plugins(new ScatterEOS());\n    const connectionOptions = { initTimeout: 10000 };\n\n    const network = {\n      blockchain: \"eos\",\n      protocol: \"http\",\n      host: \"127.0.0.1\",\n      port: 8888,\n      chainId:\"4cec7eac46c16a031768556a675aff2794f56868d290a868a5981b4f0c07d42c\"\n    };\n    \n    ScatterJS.scatter.connect(\"My-App\").then(connected => {\n      // If the user does not have Scatter or it is Locked or Closed this will return false;\n      if (!connected) return false;\n\n      const scatter = ScatterJS.scatter;\n      \n      // Now we need to get an identity from the user.\n      // We're also going to require an account that is connected to the network we're using.\n      const requiredFields = { accounts: [network] };\n      \n      scatter .getIdentity(requiredFields).then(async () => {\n\n       \n\n          // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n          // the user for their account name beforehand. They could still give you a different account.\n          \n          const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n          \n          // You can pass in any additional options you want into the eosjs reference.\n          const eosOptions = { expireInSeconds: 60 };\n\n          // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n          // const defaultPrivateKey = \"5KENusrZoy5bw9hT8s74Wv3MDdHyqsvsHzVzeRL5LtYXR6MZRcS\";\n          // const signatureProvider = new JsSignatureProvider([defaultPrivateKey]);\n          const rpc = new JsonRpc('http://127.0.0.1:8888');\n          // const api = new Api({ rpc, signatureProvider, textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n          // const api = new Api({ rpc, signatureProvider:scatter.eosHook(network) });\n          const eos = scatter.eos( network, Api, {rpc} );\n          // console.log(eos);\n          // const eos = Eos({httpEndpoint:'',  signatureProvider:ScatterJS.scatter.eosHook(network)});\n\n          // ----------------------------\n          // Now that we have an identity,\n          // an EOSIO account, and a reference\n          // to an eosjs object we can send a transaction.\n          // ----------------------------\n\n          // Never assume the account's permission/authority. Always take it from the returned account.\n          // console.log(account);\n          \n          const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n          // console.log(requiredFields);\n        //  eos.transact({\n        //      actions: [{\n        //          account: \"ed1111111111\",\n        //          name: \"hello\",\n        //          authorization: [{\n        //              actor: account.name,\n        //              permission: account.authority\n        //            }],\n        //          data: {}\n        //        }],\n        //      blocksBehind: 10,\n        //      expireSeconds: 30\n        //    })\n        //    .then(r => console.log(\"result: \", r))\n        //    .catch(err => console.error(\"aaaaahh!!!\", err));\n          \n          \n          // const contract = await eos.contract('ed11111111', {requiredFields});\n          // const result = await contract.hi(...);\n          // console.log(contract);\n          \n\n          eos.transfer(account.name, 'ed1111111111', '1.0000 TLOS', 'memo', transactionOptions).then(trx => {\n              // That's it!\n              console.log(`Transaction ID: ${trx.transaction_id}`);\n          }).catch(error => {\n              console.error(error);\n          });\n        })\n        .catch(error => {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(\"ERROR:\", error);\n        });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n}\n//:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}