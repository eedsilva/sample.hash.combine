{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc, JsSignatureProvider } from 'eosjs';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ScatterJS.plugins(new ScatterEOS());\n      var connectionOptions = {\n        initTimeout: 10000\n      };\n      var network = {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId: \"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n      };\n      ScatterJS.scatter.connect(\"My-App\").then(function (connected) {\n        // If the user does not have Scatter or it is Locked or Closed this will return false;\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter; // Now we need to get an identity from the user.\n        // We're also going to require an account that is connected to the network we're using.\n\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var account, eosOptions, rpc, eos;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n                  // the user for their account name beforehand. They could still give you a different account.\n                  account = scatter.identity.accounts.find(function (x) {\n                    return x.blockchain === 'eos';\n                  }); // You can pass in any additional options you want into the eosjs reference.\n\n                  eosOptions = {\n                    expireInSeconds: 60\n                  }; // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n                  rpc = new JsonRpc('http://127.0.0.1:8888');\n                  eos = scatter.eos(network, Api, {\n                    rpc: rpc\n                  }); // const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n                  // console.log(requiredFields);\n\n                  _context.next = 6;\n                  return eos.transact({\n                    actions: [{\n                      account: \"ed1111111111\",\n                      name: \"hello\",\n                      authorization: [{\n                        actor: account.name,\n                        permission: account.authority\n                      }],\n                      data: {}\n                    }]\n                  }, {\n                    blocksBehind: 10,\n                    expireSeconds: 30\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }))).catch(function (error) {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(\"ERROR:\", error);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); //:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterJS","ScatterEOS","Api","JsonRpc","JsSignatureProvider","App","props","plugins","connectionOptions","initTimeout","network","blockchain","protocol","host","port","chainId","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","rpc","eos","transact","actions","name","authorization","actor","permission","authority","data","blocksBehind","expireSeconds","catch","error","console"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc, JsSignatureProvider } from 'eosjs';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n  }\n\n  componentDidMount() {\n    ScatterJS.plugins(new ScatterEOS());\n    const connectionOptions = { initTimeout: 10000 };\n\n    const network = {\n      blockchain: \"eos\",\n      protocol: \"http\",\n      host: \"127.0.0.1\",\n      port: 8888,\n      chainId:\"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n    };\n    \n    ScatterJS.scatter.connect(\"My-App\").then(connected => {\n      // If the user does not have Scatter or it is Locked or Closed this will return false;\n      if (!connected) return false;\n\n      const scatter = ScatterJS.scatter;\n      \n      // Now we need to get an identity from the user.\n      // We're also going to require an account that is connected to the network we're using.\n      const requiredFields = { accounts: [network] };\n      \n      scatter .getIdentity(requiredFields).then(async () => {\n\n       \n          // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n          // the user for their account name beforehand. They could still give you a different account.\n          \n          const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n          \n          // You can pass in any additional options you want into the eosjs reference.\n          const eosOptions = { expireInSeconds: 60 };\n\n          // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n           const rpc = new JsonRpc('http://127.0.0.1:8888');\n        \n          const eos = scatter.eos( network, Api, {rpc} );\n          \n          // const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n          // console.log(requiredFields);\n         await eos.transact({\n             actions: [{\n                 account: \"ed1111111111\",\n                 name: \"hello\",\n                 authorization: [{\n                     actor: account.name,\n                     permission: account.authority\n                   }],\n                 data: {}\n               }] \n           }, { blocksBehind: 10,\n            expireSeconds: 30});\n  \n        })\n        .catch(error => {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(\"ERROR:\", error);\n        });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n}\n//:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}