{"ast":null,"code":"import _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc, JsSignatureProvider } from 'eosjs';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      scatterjs: null,\n      network: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ScatterJS.plugins(new ScatterEOS());\n      var network = {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId: \"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n      };\n      this.setState({\n        network: network,\n        scatterjs: ScatterJS\n      });\n      window.ScatterJS = null;\n      window.ScatterEOS = null; // ScatterJS.scatter.connect(\"My-App\").then(connected => {\n      //   // If the user does not have Scatter or it is Locked or Closed this will return false;\n      //   if (!connected) return false;\n      //   const scatter = ScatterJS.scatter;\n      //   // Now we need to get an identity from the user.\n      //   // We're also going to require an account that is connected to the network we're using.\n      //   const requiredFields = { accounts: [network] };\n      //   scatter .getIdentity(requiredFields).then(async () => {\n      //       // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n      //       // the user for their account name beforehand. They could still give you a different account.\n      //       const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n      //       // You can pass in any additional options you want into the eosjs reference.\n      //       const eosOptions = { expireInSeconds: 60 };\n      //       // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n      //        const rpc = new JsonRpc('http://127.0.0.1:8888');\n      //       const eos = scatter.eos( network, Api, {rpc} );\n      //       // const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n      //       // console.log(requiredFields);\n      //      await eos.transact({\n      //          actions: [{\n      //              account: \"ed1111111111\",\n      //              name: \"hello\",\n      //              authorization: [{\n      //                  actor: account.name,\n      //                  permission: account.authority\n      //                }],\n      //              data: {}\n      //            }] \n      //        }, { blocksBehind: 10,\n      //         expireSeconds: 30});\n      //     })\n      //     .catch(error => {\n      //       // The user rejected this request, or doesn't have the appropriate requirements.\n      //       console.error(\"ERROR:\", error);\n      //     });\n      // });\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.onClick;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Test\")));\n    }\n  }]);\n\n  return App;\n}(Component); //:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterJS","ScatterEOS","Api","JsonRpc","JsSignatureProvider","App","props","state","scatterjs","network","plugins","blockchain","protocol","host","port","chainId","setState","window","onClick"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,mBAAvB,QAAkD,OAAlD;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,OAAO,EAAE;AAFE,KAAb;AAFiB;AAMlB;;;;wCAEmB;AAClBT,MAAAA,SAAS,CAACU,OAAV,CAAkB,IAAIT,UAAJ,EAAlB;AAEA,UAAMQ,OAAO,GAAG;AACdE,QAAAA,UAAU,EAAE,KADE;AAEdC,QAAAA,QAAQ,EAAE,MAFI;AAGdC,QAAAA,IAAI,EAAE,WAHQ;AAIdC,QAAAA,IAAI,EAAE,IAJQ;AAKdC,QAAAA,OAAO,EAAC;AALM,OAAhB;AAQA,WAAKC,QAAL,CAAc;AACZP,QAAAA,OAAO,EAACA,OADI;AAEZD,QAAAA,SAAS,EAAER;AAFC,OAAd;AAKAiB,MAAAA,MAAM,CAACjB,SAAP,GAAmB,IAAnB;AACAiB,MAAAA,MAAM,CAAChB,UAAP,GAAoB,IAApB,CAjBkB,CAmBlB;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGD;;;8BACS,CAET;;;6BACQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEF,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAI,MAAI,CAACmB,OAAT;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,CADF;AASD;;;;EA5FepB,S,GA8FlB;AACA;AACA;AACA;AACA;;;AAEA,eAAeO,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc, JsSignatureProvider } from 'eosjs';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scatterjs: null,\n      network: null\n    }\n  }\n\n  componentDidMount() {\n    ScatterJS.plugins(new ScatterEOS());\n    \n    const network = {\n      blockchain: \"eos\",\n      protocol: \"http\",\n      host: \"127.0.0.1\",\n      port: 8888,\n      chainId:\"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n    };\n\n    this.setState({\n      network:network,\n      scatterjs: ScatterJS\n    });\n\n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n    \n    // ScatterJS.scatter.connect(\"My-App\").then(connected => {\n    //   // If the user does not have Scatter or it is Locked or Closed this will return false;\n    //   if (!connected) return false;\n\n    //   const scatter = ScatterJS.scatter;\n      \n    //   // Now we need to get an identity from the user.\n    //   // We're also going to require an account that is connected to the network we're using.\n    //   const requiredFields = { accounts: [network] };\n      \n    //   scatter .getIdentity(requiredFields).then(async () => {\n\n       \n    //       // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n    //       // the user for their account name beforehand. They could still give you a different account.\n          \n    //       const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n          \n    //       // You can pass in any additional options you want into the eosjs reference.\n    //       const eosOptions = { expireInSeconds: 60 };\n\n    //       // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n    //        const rpc = new JsonRpc('http://127.0.0.1:8888');\n        \n    //       const eos = scatter.eos( network, Api, {rpc} );\n          \n    //       // const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n    //       // console.log(requiredFields);\n    //      await eos.transact({\n    //          actions: [{\n    //              account: \"ed1111111111\",\n    //              name: \"hello\",\n    //              authorization: [{\n    //                  actor: account.name,\n    //                  permission: account.authority\n    //                }],\n    //              data: {}\n    //            }] \n    //        }, { blocksBehind: 10,\n    //         expireSeconds: 30});\n            \n    //     })\n    //     .catch(error => {\n    //       // The user rejected this request, or doesn't have the appropriate requirements.\n    //       console.error(\"ERROR:\", error);\n    //     });\n    // });\n\n   \n  }\n  onClick() {\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button onClick={()=>this.onClick}>Test</button>\n        </header>\n        \n      </div>\n    );\n  }\n}\n//:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}