{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterBridge from \"./scatterBrigde\";\nimport crypto from 'crypto-js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      scatterBridge: null,\n      network: {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId: \"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n      }\n    };\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        scatterBridge: new ScatterBridge(this.state.network, \"My-App\")\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"onClick\",\n    value: function () {\n      var _onClick = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(arg) {\n        var actions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.state.scatterBridge.connect();\n\n              case 2:\n                _context2.next = 4;\n                return this.state.scatterBridge.getIdentity();\n\n              case 4:\n                actions = [];\n                actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"hello\", {}));\n                actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"bye\", {})); // var hash = crypto.SHA256(\"test\");\n                // actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"test\", {\n                //     bets: [1, 2, 3, 3, 2, 1],\n                //     recharges: 3,\n                //     seed_phrase: hash.toString(crypto.enc.Hex)\n                //   }, \"owner\"));\n                // await this.state.scatterBridge.sendTx(actions);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onClick(_x) {\n        return _onClick.apply(this, arguments);\n      }\n\n      return onClick;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Test\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterBridge","crypto","App","props","state","scatterBridge","network","blockchain","protocol","host","port","chainId","onClick","bind","setState","arg","connect","getIdentity","actions","push","makeAction"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,WAAP;AACA,OAAOC,aAAP,MAA2B,iBAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;IAGMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,IADJ;AAEXC,MAAAA,OAAO,EAAE;AACPC,QAAAA,UAAU,EAAE,KADL;AAEPC,QAAAA,QAAQ,EAAE,MAFH;AAGPC,QAAAA,IAAI,EAAE,WAHC;AAIPC,QAAAA,IAAI,EAAE,IAJC;AAKPC,QAAAA,OAAO,EACL;AANK;AAFE,KAAb;AAYA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,uDAAf;AAfiB;AAgBlB;;;;yCAEoB;AACnB,WAAKC,QAAL,CAAc;AACZT,QAAAA,aAAa,EAAE,IAAIL,aAAJ,CAAkB,KAAKI,KAAL,CAAWE,OAA7B,EAAsC,QAAtC;AADH,OAAd;AAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAMaS,G;;;;;;;uBACN,KAAKX,KAAL,CAAWC,aAAX,CAAyBW,OAAzB,E;;;;uBACA,KAAKZ,KAAL,CAAWC,aAAX,CAAyBY,WAAzB,E;;;AAEFC,gBAAAA,O,GAAU,E;AAEdA,gBAAAA,OAAO,CAACC,IAAR,CAAa,KAAKf,KAAL,CAAWC,aAAX,CAAyBe,UAAzB,CAAoC,cAApC,EAAmD,OAAnD,EAA4D,EAA5D,CAAb;AACAF,gBAAAA,OAAO,CAACC,IAAR,CAAa,KAAKf,KAAL,CAAWC,aAAX,CAAyBe,UAAzB,CAAoC,cAApC,EAAmD,KAAnD,EAA0D,EAA1D,CAAb,E,CACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;6BAGO;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAErB,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAQ,QAAA,OAAO,EAAE,KAAKa,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,CADF;AAQD;;;;EAzDed,S;;AA4DlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterBridge  from \"./scatterBrigde\";\nimport crypto from 'crypto-js';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      scatterBridge: null,\n      network: {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId:\n          \"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n      }\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      scatterBridge: new ScatterBridge(this.state.network, \"My-App\")\n    });\n  }\n\n  async componentDidMount() {\n    \n  }\n  \n  async onClick(arg) {\n    await this.state.scatterBridge.connect();\n    await this.state.scatterBridge.getIdentity();\n\n    var actions = [];\n\n    actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\",\"hello\", {}));\n    actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\",\"bye\", {}));\n    // var hash = crypto.SHA256(\"test\");\n    \n    // actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"test\", {\n    //     bets: [1, 2, 3, 3, 2, 1],\n    //     recharges: 3,\n    //     seed_phrase: hash.toString(crypto.enc.Hex)\n    //   }, \"owner\"));\n    \n    // await this.state.scatterBridge.sendTx(actions);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button onClick={this.onClick}>Test</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}