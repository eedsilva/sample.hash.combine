{"ast":null,"code":"import _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\"; // import Eos from 'eosjs';\n\nimport { Api, JsonRpc, RpcError, JsSignatureProvider } from 'eosjs'; // import { JsSignatureProvider } from 'eosjs';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    ScatterJS.plugins(new ScatterEOS());\n    var connectionOptions = {\n      initTimeout: 10000\n    };\n    var network = {\n      blockchain: \"eos\",\n      protocol: \"http\",\n      host: \"127.0.0.1\",\n      port: 8888,\n      chainId: \"4cec7eac46c16a031768556a675aff2794f56868d290a868a5981b4f0c07d42c\"\n    };\n    ScatterJS.scatter.connect(\"My-App\").then(function (connected) {\n      // If the user does not have Scatter or it is Locked or Closed this will return false;\n      if (!connected) return false;\n      var scatter = ScatterJS.scatter; // Now we need to get an identity from the user.\n      // We're also going to require an account that is connected to the network we're using.\n\n      var requiredFields = {\n        accounts: [network]\n      };\n      scatter.getIdentity(requiredFields).then(function () {\n        // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n        // the user for their account name beforehand. They could still give you a different account.\n        var account = scatter.identity.accounts.find(function (x) {\n          return x.blockchain === 'eos';\n        }); // You can pass in any additional options you want into the eosjs reference.\n\n        var eosOptions = {\n          expireInSeconds: 60\n        }; // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n        // const defaultPrivateKey = \"5KENusrZoy5bw9hT8s74Wv3MDdHyqsvsHzVzeRL5LtYXR6MZRcS\";\n        // const signatureProvider = new JsSignatureProvider([defaultPrivateKey]);\n\n        var rpc = new JsonRpc('http://127.0.0.1:8888');\n        var api = new Api({\n          rpc: rpc,\n          authorityProvider: signatureProvider,\n          chainId: \"4cec7eac46c16a031768556a675aff2794f56868d290a868a5981b4f0c07d42c\",\n          textDecoder: new TextDecoder(),\n          textEncoder: new TextEncoder()\n        }); // const api = new Api({ rpc, signatureProvider:scatter.eosHook(network) });\n\n        var eos = scatter.eos(network, api, {\n          rpc: rpc\n        }); // const eos = Eos({httpEndpoint:'',  signatureProvider:ScatterJS.scatter.eosHook(network)});\n        // ----------------------------\n        // Now that we have an identity,\n        // an EOSIO account, and a reference\n        // to an eosjs object we can send a transaction.\n        // ----------------------------\n        // Never assume the account's permission/authority. Always take it from the returned account.\n        // console.log(account);\n\n        var transactionOptions = {\n          authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n        }; // eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\n        //     // That's it!\n        //     console.log(`Transaction ID: ${trx.transaction_id}`);\n        // }).catch(error => {\n        //     console.error(error);\n        // });\n      }).catch(function (error) {\n        // The user rejected this request, or doesn't have the appropriate requirements.\n        console.error(\"ERROR:\", error);\n      });\n    });\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); //:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterJS","ScatterEOS","Api","JsonRpc","RpcError","JsSignatureProvider","App","props","plugins","connectionOptions","initTimeout","network","blockchain","protocol","host","port","chainId","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","rpc","api","authorityProvider","signatureProvider","textDecoder","TextDecoder","textEncoder","TextEncoder","eos","transactionOptions","authorization","name","authority","catch","error","console"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\n// import Eos from 'eosjs';\nimport { Api, JsonRpc, RpcError, JsSignatureProvider } from 'eosjs';\n// import { JsSignatureProvider } from 'eosjs';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    ScatterJS.plugins(new ScatterEOS());\n    const connectionOptions = { initTimeout: 10000 };\n\n    const network = {\n      blockchain: \"eos\",\n      protocol: \"http\",\n      host: \"127.0.0.1\",\n      port: 8888,\n      chainId:\"4cec7eac46c16a031768556a675aff2794f56868d290a868a5981b4f0c07d42c\"\n    };\n    \n    ScatterJS.scatter.connect(\"My-App\").then(connected => {\n      // If the user does not have Scatter or it is Locked or Closed this will return false;\n      if (!connected) return false;\n\n      const scatter = ScatterJS.scatter;\n      \n      // Now we need to get an identity from the user.\n      // We're also going to require an account that is connected to the network we're using.\n      const requiredFields = { accounts: [network] };\n      \n      scatter .getIdentity(requiredFields).then(() => {\n\n       \n\n          // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n          // the user for their account name beforehand. They could still give you a different account.\n          \n          const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n          \n          // You can pass in any additional options you want into the eosjs reference.\n          const eosOptions = { expireInSeconds: 60 };\n\n          // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n\n          // const defaultPrivateKey = \"5KENusrZoy5bw9hT8s74Wv3MDdHyqsvsHzVzeRL5LtYXR6MZRcS\";\n          // const signatureProvider = new JsSignatureProvider([defaultPrivateKey]);\n          const rpc = new JsonRpc('http://127.0.0.1:8888');\n          const api = new Api({ rpc:rpc, authorityProvider: signatureProvider, chainId:\"4cec7eac46c16a031768556a675aff2794f56868d290a868a5981b4f0c07d42c\", textDecoder: new TextDecoder(), textEncoder: new TextEncoder() });\n          // const api = new Api({ rpc, signatureProvider:scatter.eosHook(network) });\n          const eos = scatter.eos( network, api, {rpc} );\n          // const eos = Eos({httpEndpoint:'',  signatureProvider:ScatterJS.scatter.eosHook(network)});\n\n          // ----------------------------\n          // Now that we have an identity,\n          // an EOSIO account, and a reference\n          // to an eosjs object we can send a transaction.\n          // ----------------------------\n\n          // Never assume the account's permission/authority. Always take it from the returned account.\n          // console.log(account);\n          \n          const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n          \n\n          // eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\n          //     // That's it!\n          //     console.log(`Transaction ID: ${trx.transaction_id}`);\n          // }).catch(error => {\n          //     console.error(error);\n          // });\n        })\n        .catch(error => {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(\"ERROR:\", error);\n        });\n    });\n  }\n\n  componentDidMount() {\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n}\n//:3888/\n//http://10.10.30.181:8888\n//\n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}