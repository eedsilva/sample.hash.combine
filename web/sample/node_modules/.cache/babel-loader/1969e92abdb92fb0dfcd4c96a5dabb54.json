{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterBridge from \"./scatterBrigde\";\nimport crypto from 'crypto-js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      scatterBridge: null,\n      network: {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId: \"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n      }\n    };\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        scatterBridge: new ScatterBridge(this.state.network, \"My-App\")\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"makeRandStr\",\n    value: function makeRandStr() {\n      var text = \"\";\n      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n      for (var i = 0; i < 5; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      console.log(text);\n    }\n  }, {\n    key: \"onClick\",\n    value: function () {\n      var _onClick = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(arg) {\n        var actions, str1, str2, hash1, hash2;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.makeRandStr();\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.next = 6;\n                return this.state.scatterBridge.getIdentity();\n\n              case 6:\n                actions = [];\n                str1 = \"test\";\n                str2 = \"testing\";\n                hash1 = crypto.SHA256(str1);\n                hash2 = crypto.SHA256(str2);\n                actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"randfromstr\", {\n                  seed_user1: str1,\n                  seed_user2: str2\n                }));\n                actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"randfromhash\", {\n                  hash_user1: hash1.toString(crypto.enc.Hex),\n                  hash_user2: hash2.toString(crypto.enc.Hex)\n                }));\n                _context2.next = 15;\n                return this.state.scatterBridge.sendTx(actions);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onClick(_x) {\n        return _onClick.apply(this, arguments);\n      }\n\n      return onClick;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.onClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Test\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterBridge","crypto","App","props","state","scatterBridge","network","blockchain","protocol","host","port","chainId","onClick","bind","setState","text","possible","i","charAt","Math","floor","random","length","console","log","arg","makeRandStr","getIdentity","actions","str1","str2","hash1","SHA256","hash2","push","makeAction","seed_user1","seed_user2","hash_user1","toString","enc","Hex","hash_user2","sendTx"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterBridge  from \"./scatterBrigde\";\nimport crypto from 'crypto-js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      scatterBridge: null,\n      network: {\n        blockchain: \"eos\",\n        protocol: \"http\",\n        host: \"127.0.0.1\",\n        port: 8888,\n        chainId:\n          \"5c414e20cb772e0d634a3a1e54587bc49ea5b3a11c1991dc4548f93d72f9621f\"\n      }\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      scatterBridge: new ScatterBridge(this.state.network, \"My-App\")\n    });\n  }\n\n  async componentDidMount() {\n    \n  }\n\n  makeRandStr() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  \n    for (var i = 0; i < 5; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));\n    console.log(text);\n    \n  }\n  \n  async onClick(arg) {\n    this.makeRandStr(); return;\n    await this.state.scatterBridge.connect();\n    await this.state.scatterBridge.getIdentity();\n\n    let actions = [];\n    let str1 = \"test\";\n    let str2 = \"testing\";\n    let hash1 = crypto.SHA256(str1);\n    let hash2 = crypto.SHA256(str2);\n    \n    actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"randfromstr\", {\n      seed_user1: str1,\n      seed_user2: str2\n    }));\n    \n    actions.push(this.state.scatterBridge.makeAction(\"ed1111111111\", \"randfromhash\", {\n        hash_user1: hash1.toString(crypto.enc.Hex),\n        hash_user2: hash2.toString(crypto.enc.Hex)\n      }));\n    \n    await this.state.scatterBridge.sendTx(actions);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button onClick={this.onClick}>Test</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}