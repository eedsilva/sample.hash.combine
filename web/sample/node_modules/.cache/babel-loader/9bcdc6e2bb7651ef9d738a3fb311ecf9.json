{"ast":null,"code":"import _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nvar ScatterBridge =\n/*#__PURE__*/\nfunction () {\n  function ScatterBridge(network, appName) {\n    _classCallCheck(this, ScatterBridge);\n\n    this.appName = appName;\n    ScatterJS.plugins(new ScatterEOS());\n    this.scatter = ScatterJS.scatter;\n    this.network = network;\n    var rpc = new JsonRpc(\"\".concat(network.protocol, \"://\").concat(network.host, \":\").concat(network.port));\n    this.currentAccount = null;\n    this.reqFields = {\n      accounts: [network]\n    };\n    this.eosApi = this.scatter.eos(network, Api, {\n      rpc: rpc\n    });\n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n  }\n\n  _createClass(ScatterBridge, [{\n    key: \"getIdentity\",\n    value: function getIdentity() {\n      var _this = this;\n\n      this.scatter.connect(this.appName).then(function (connected) {\n        _this.scatter.getIdentity(_this.reqFields).then(function () {\n          _this.currentAccount = _this.scatter.identity.accounts.find(function (x) {\n            return x.blockchain === \"eos\";\n          });\n        }).catch(function (error) {\n          return console.error;\n        });\n      }).catch(function (err) {\n        return console.error;\n      });\n    }\n  }]);\n\n  return ScatterBridge;\n}();\n\nexport { ScatterBridge as default };","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/scatterBrigde.js"],"names":["ScatterJS","ScatterEOS","Api","JsonRpc","ScatterBridge","network","appName","plugins","scatter","rpc","protocol","host","port","currentAccount","reqFields","accounts","eosApi","eos","window","connect","then","connected","getIdentity","identity","find","x","blockchain","catch","error","console","err"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,OAA7B;;IAEqBC,a;;;AACnB,yBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAC5B,SAAKA,OAAL,GAAeA,OAAf;AACAN,IAAAA,SAAS,CAACO,OAAV,CAAkB,IAAIN,UAAJ,EAAlB;AACA,SAAKO,OAAL,GAAeR,SAAS,CAACQ,OAAzB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,QAAMI,GAAG,GAAG,IAAIN,OAAJ,WAAeE,OAAO,CAACK,QAAvB,gBAAqCL,OAAO,CAACM,IAA7C,cAAqDN,OAAO,CAACO,IAA7D,EAAZ;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,SAAL,GAAiB;AAAEC,MAAAA,QAAQ,EAAE,CAACV,OAAD;AAAZ,KAAjB;AACA,SAAKW,MAAL,GAAc,KAAKR,OAAL,CAAaS,GAAb,CAAiBZ,OAAjB,EAA0BH,GAA1B,EAA+B;AAACO,MAAAA,GAAG,EAAHA;AAAD,KAA/B,CAAd;AAEAS,IAAAA,MAAM,CAAClB,SAAP,GAAmB,IAAnB;AACAkB,IAAAA,MAAM,CAACjB,UAAP,GAAoB,IAApB;AACD;;;;kCAEa;AAAA;;AACZ,WAAKO,OAAL,CAAaW,OAAb,CAAqB,KAAKb,OAA1B,EAAmCc,IAAnC,CAAwC,UAAAC,SAAS,EAAI;AACnD,QAAA,KAAI,CAACb,OAAL,CAAac,WAAb,CAAyB,KAAI,CAACR,SAA9B,EAAyCM,IAAzC,CAA8C,YAAM;AAChD,UAAA,KAAI,CAACP,cAAL,GAAsB,KAAI,CAACL,OAAL,CAAae,QAAb,CAAsBR,QAAtB,CAA+BS,IAA/B,CAAoC,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,UAAF,KAAiB,KAArB;AAAA,WAArC,CAAtB;AACD,SAFH,EAEKC,KAFL,CAEW,UAAAC,KAAK;AAAA,iBAAIC,OAAO,CAACD,KAAZ;AAAA,SAFhB;AAGD,OAJD,EAIGD,KAJH,CAIS,UAAAG,GAAG;AAAA,eAAED,OAAO,CAACD,KAAV;AAAA,OAJZ;AAKD;;;;;;SArBkBxB,a","sourcesContent":["import ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nexport default class ScatterBridge {\n  constructor(network, appName) {\n    this.appName = appName;  \n    ScatterJS.plugins(new ScatterEOS());\n    this.scatter = ScatterJS.scatter;\n    this.network = network;\n    const rpc = new JsonRpc(`${network.protocol}://${network.host}:${network.port}`);\n    this.currentAccount = null;\n    this.reqFields = { accounts: [network] };\n    this.eosApi = this.scatter.eos(network, Api, {rpc});\n\n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n  }\n\n  getIdentity() {\n    this.scatter.connect(this.appName).then(connected => {\n      this.scatter.getIdentity(this.reqFields).then(() => {\n          this.currentAccount = this.scatter.identity.accounts.find(x => x.blockchain === \"eos\");\n        }).catch(error => console.error);\n    }).catch(err=>console.error);\n  }\n\n  \n}\n\n\n"]},"metadata":{},"sourceType":"module"}