{"ast":null,"code":"import _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      ScatterJS.plugins(new ScatterEOS());\n      var connectionOptions = {\n        initTimeout: 10000\n      };\n      var network = {\n        blockchain: 'eos',\n        protocol: 'http',\n        host: '10.10.30.181',\n        port: 8888,\n        chainId: 'b7050244861f53291259fcae7274679ae1b99ff56507a5a9c3fe080dc7556f97'\n      };\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        // If the user does not have Scatter or it is Locked or Closed this will return false;\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter; // Now we need to get an identity from the user.\n        // We're also going to require an account that is connected to the network we're using.\n\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n          // the user for their account name beforehand. They could still give you a different account.\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // You can pass in any additional options you want into the eosjs reference.\n\n          var eosOptions = {\n            expireInSeconds: 60\n          }; // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n          // const eos = scatter.eos(network, Eos, eosOptions);\n          // ----------------------------\n          // Now that we have an identity,\n          // an EOSIO account, and a reference\n          // to an eosjs object we can send a transaction.\n          // ----------------------------\n          // Never assume the account's permission/authority. Always take it from the returned account.\n\n          var transactionOptions = {\n            authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n          };\n          eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(function (trx) {\n            // That's it!\n            console.log(\"Transaction ID: \".concat(trx.transaction_id));\n          }).catch(function (error) {\n            console.error(error);\n          });\n        }).catch(function (error) {\n          // The user rejected this request, or doesn't have the appropriate requirements.\n          console.error(error);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component); //:3888/\n//http://10.10.30.181:8888\n// \n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\n\nexport default App;","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/App.js"],"names":["React","Component","logo","ScatterJS","ScatterEOS","App","props","plugins","connectionOptions","initTimeout","network","blockchain","protocol","host","port","chainId","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","transactionOptions","authorization","name","authority","eos","transfer","trx","console","log","transaction_id","catch","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,WAAP;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA,4EACXA,KADW;AAElB;;;;wCAEmB;AAClBH,MAAAA,SAAS,CAACI,OAAV,CAAkB,IAAIH,UAAJ,EAAlB;AACA,UAAMI,iBAAiB,GAAG;AAAEC,QAAAA,WAAW,EAAE;AAAf,OAA1B;AAGA,UAAMC,OAAO,GAAG;AACdC,QAAAA,UAAU,EAAC,KADG;AAEdC,QAAAA,QAAQ,EAAC,MAFK;AAGdC,QAAAA,IAAI,EAAC,cAHS;AAIdC,QAAAA,IAAI,EAAC,IAJS;AAKdC,QAAAA,OAAO,EAAC;AALM,OAAhB;AASFZ,MAAAA,SAAS,CAACa,OAAV,CAAkBC,OAAlB,CAA0B,QAA1B,EAAoCC,IAApC,CAAyC,UAAAC,SAAS,EAAI;AAEpD;AACA,YAAG,CAACA,SAAJ,EAAe,OAAO,KAAP;AAEf,YAAMH,OAAO,GAAGb,SAAS,CAACa,OAA1B,CALoD,CAOpD;AACA;;AACA,YAAMI,cAAc,GAAG;AAAEC,UAAAA,QAAQ,EAAC,CAACX,OAAD;AAAX,SAAvB;AACAM,QAAAA,OAAO,CAACM,WAAR,CAAoBF,cAApB,EAAoCF,IAApC,CAAyC,YAAM;AAE3C;AACA;AACA,cAAMK,OAAO,GAAGP,OAAO,CAACQ,QAAR,CAAiBH,QAAjB,CAA0BI,IAA1B,CAA+B,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACf,UAAF,KAAiB,KAArB;AAAA,WAAhC,CAAhB,CAJ2C,CAM3C;;AACA,cAAMgB,UAAU,GAAG;AAAEC,YAAAA,eAAe,EAAC;AAAlB,WAAnB,CAP2C,CAS3C;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;;AACA,cAAMC,kBAAkB,GAAG;AAAEC,YAAAA,aAAa,EAAC,WAAIP,OAAO,CAACQ,IAAZ,cAAoBR,OAAO,CAACS,SAA5B;AAAhB,WAA3B;AAEAC,UAAAA,GAAG,CAACC,QAAJ,CAAaX,OAAO,CAACQ,IAArB,EAA2B,YAA3B,EAAyC,YAAzC,EAAuD,MAAvD,EAA+DF,kBAA/D,EAAmFX,IAAnF,CAAwF,UAAAiB,GAAG,EAAI;AAC3F;AACAC,YAAAA,OAAO,CAACC,GAAR,2BAA+BF,GAAG,CAACG,cAAnC;AACH,WAHD,EAGGC,KAHH,CAGS,UAAAC,KAAK,EAAI;AACdJ,YAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACH,WALD;AAOH,SA7BD,EA6BGD,KA7BH,CA6BS,UAAAC,KAAK,EAAI;AACd;AACAJ,UAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACH,SAhCD;AAiCH,OA3CC;AA6CC;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEtC,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAOD;;;;EA1EeD,S,GA4ElB;AACA;AACA;AACA;AACA;;;AAEA,eAAeI,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./telos.png\";\nimport \"./App.css\";\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    ScatterJS.plugins(new ScatterEOS());\n    const connectionOptions = { initTimeout: 10000 };\n\n\n    const network = {\n      blockchain:'eos',\n      protocol:'http',\n      host:'10.10.30.181',\n      port:8888,\n      chainId:'b7050244861f53291259fcae7274679ae1b99ff56507a5a9c3fe080dc7556f97'\n  }\n  \n\n  ScatterJS.scatter.connect('My-App').then(connected => {\n\n    // If the user does not have Scatter or it is Locked or Closed this will return false;\n    if(!connected) return false;\n\n    const scatter = ScatterJS.scatter;\n\n    // Now we need to get an identity from the user.\n    // We're also going to require an account that is connected to the network we're using.\n    const requiredFields = { accounts:[network] };\n    scatter.getIdentity(requiredFields).then(() => {\n\n        // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n        // the user for their account name beforehand. They could still give you a different account.\n        const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n\n        // You can pass in any additional options you want into the eosjs reference.\n        const eosOptions = { expireInSeconds:60 };\n\n        // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n        // const eos = scatter.eos(network, Eos, eosOptions);\n\n        // ----------------------------\n        // Now that we have an identity,\n        // an EOSIO account, and a reference\n        // to an eosjs object we can send a transaction.\n        // ----------------------------\n\n\n        // Never assume the account's permission/authority. Always take it from the returned account.\n        const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n\n        eos.transfer(account.name, 'helloworld', '1.0000 EOS', 'memo', transactionOptions).then(trx => {\n            // That's it!\n            console.log(`Transaction ID: ${trx.transaction_id}`);\n        }).catch(error => {\n            console.error(error);\n        });\n\n    }).catch(error => {\n        // The user rejected this request, or doesn't have the appropriate requirements.\n        console.error(error);\n    });\n});\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n      </div>\n    );\n  }\n}\n//:3888/\n//http://10.10.30.181:8888\n// \n//EOS5zhje4qfs9BjxR6aJGJGYarYNe4Gms7DUzqTh8Qutm6h4CQUaP\n//5KfuFxCYZXZ9ni4iXqRqKfZ5KsxQwz2oWM9ugSjmcyxLFKpxsba\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}