{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hotmdev2/Documents/projects/telos/sample/web/app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _this = this;\n\nimport ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nvar ScatterBridge =\n/*#__PURE__*/\nfunction () {\n  function ScatterBridge(network, appName) {\n    _classCallCheck(this, ScatterBridge);\n\n    this.appName = appName;\n    ScatterJS.plugins(new ScatterEOS());\n    this.scatter = ScatterJS.scatter;\n    this.network = network;\n    var rpc = new JsonRpc(\"\".concat(network.protocol, \"://\").concat(network.host, \":\").concat(network.port));\n    this.currentAccount = null;\n    this.reqFields = {\n      accounts: [network]\n    };\n    this.eosApi = this.scatter.eos(network, Api, {\n      rpc: rpc\n    });\n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n  }\n\n  _createClass(ScatterBridge, [{\n    key: \"getIdentity\",\n    value: function getIdentity() {// this.scatter.getIdentity(this.reqFields).then(() => {\n      //     this.currentAccount = this.scatter.identity.accounts.find(x => x.blockchain === \"eos\");\n      // }).catch(error => {\n      //     console.error(\"ERROR:\", error);\n      // });\n    }\n  }]);\n\n  return ScatterBridge;\n}();\n\nexport { ScatterBridge as default };\nScatterBridge.prototype.connect =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", _this.scatter.connect(_this.appName));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, this);\n}));","map":{"version":3,"sources":["/Users/hotmdev2/Documents/projects/telos/sample/web/app/src/scatterBrigde.js"],"names":["ScatterJS","ScatterEOS","Api","JsonRpc","ScatterBridge","network","appName","plugins","scatter","rpc","protocol","host","port","currentAccount","reqFields","accounts","eosApi","eos","window","prototype","connect"],"mappings":";;;;;;;AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,OAA7B;;IAEqBC,a;;;AACnB,yBAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;;AAC5B,SAAKA,OAAL,GAAeA,OAAf;AACAN,IAAAA,SAAS,CAACO,OAAV,CAAkB,IAAIN,UAAJ,EAAlB;AACA,SAAKO,OAAL,GAAeR,SAAS,CAACQ,OAAzB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,QAAMI,GAAG,GAAG,IAAIN,OAAJ,WAAeE,OAAO,CAACK,QAAvB,gBAAqCL,OAAO,CAACM,IAA7C,cAAqDN,OAAO,CAACO,IAA7D,EAAZ;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,SAAL,GAAiB;AAAEC,MAAAA,QAAQ,EAAE,CAACV,OAAD;AAAZ,KAAjB;AACA,SAAKW,MAAL,GAAc,KAAKR,OAAL,CAAaS,GAAb,CAAiBZ,OAAjB,EAA0BH,GAA1B,EAA+B;AAACO,MAAAA,GAAG,EAAHA;AAAD,KAA/B,CAAd;AAEAS,IAAAA,MAAM,CAAClB,SAAP,GAAmB,IAAnB;AACAkB,IAAAA,MAAM,CAACjB,UAAP,GAAoB,IAApB;AACD;;;;kCAEa,CAEZ;AACA;AAEA;AACA;AACA;AACD;;;;;;SAvBkBG,a;AA0BrBA,aAAa,CAACe,SAAd,CAAwBC,OAAxB;AAAA;AAAA;AAAA;AAAA,yBAAkC;AAAA;AAAA;AAAA;AAAA;AAAA,2CACvB,KAAI,CAACZ,OAAL,CAAaY,OAAb,CAAqB,KAAI,CAACd,OAA1B,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlC","sourcesContent":["import ScatterJS from \"scatterjs-core\";\nimport ScatterEOS from \"scatterjs-plugin-eosjs2\";\nimport { Api, JsonRpc } from \"eosjs\";\n\nexport default class ScatterBridge {\n  constructor(network, appName) {\n    this.appName = appName;  \n    ScatterJS.plugins(new ScatterEOS());\n    this.scatter = ScatterJS.scatter;\n    this.network = network;\n    const rpc = new JsonRpc(`${network.protocol}://${network.host}:${network.port}`);\n    this.currentAccount = null;\n    this.reqFields = { accounts: [network] };\n    this.eosApi = this.scatter.eos(network, Api, {rpc});\n\n    window.ScatterJS = null;\n    window.ScatterEOS = null;\n  }\n\n  getIdentity() {\n    \n    // this.scatter.getIdentity(this.reqFields).then(() => {\n    //     this.currentAccount = this.scatter.identity.accounts.find(x => x.blockchain === \"eos\");\n        \n    // }).catch(error => {\n    //     console.error(\"ERROR:\", error);\n    // });\n  }\n}\n\nScatterBridge.prototype.connect = async () => {\n    return this.scatter.connect(this.appName);\n};\n\n"]},"metadata":{},"sourceType":"module"}